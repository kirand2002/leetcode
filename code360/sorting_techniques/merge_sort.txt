def merge_sort(arr):
    # Base case: if the array has one or zero elements, it's already sorted
    if len(arr) <= 1:
        return arr

    # Find the middle point to divide the array into two halves
    mid = len(arr) // 2

    # Recursively sort each half
    left_half = merge_sort(arr[:mid])
    right_half = merge_sort(arr[mid:])

    # Merge the sorted halves
    return merge(left_half, right_half)


def merge(left, right):
    sorted_list = []
    i = j = 0

    # Compare each element of the left and right half and add the smaller one to the sorted list
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            sorted_list.append(left[i])
            i += 1
        else:
            sorted_list.append(right[j])
            j += 1

    # Add any remaining elements from both halves
    sorted_list.extend(left[i:])
    sorted_list.extend(right[j:])

    return sorted_list


# Example usage
arr = [38, 27, 43, 3, 9, 82, 10]
sorted_arr = merge_sort(arr)
print("Sorted array:", sorted_arr)


-------------------------------------------------------------------------

def merge(arr,start,mid,end):
#     i=start
#     j=mid+1
#     res=[]
#     while i<=mid and j<=end:
#         if arr[i]<arr[j]:
#             res.append(arr[i])
#             i+=1
#         else:
#             res.append(arr[j])
#             j+=1
#
#     while i<=mid:
#         res.append(arr[i])
#         i+=1
#     while j<=end:
#         res.append(arr[j])
#         j+=1
#     i=start
#     for k in range(0,len(res)):
#         arr[i]=res[k]
#         i+=1
#
# def mergesort(arr,start,end):
#
#     if start==end:
#         return
#     mid = (start + end) // 2
#     mergesort(arr,start,mid)
#     mergesort(arr,mid+1,end)
#     merge(arr,start,mid,end)
# mergesort(l1,0,len(l1)-1)
# print(l1)
