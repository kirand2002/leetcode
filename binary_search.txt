from typing import List
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        n=len(nums)
        l=0
        r=n-1
        while(l<=r):
            mid=(l+r)//2
            if nums[mid]==target:
                return mid
            elif nums[mid]<target:
                l=mid+1
            else:
                r=mid-1
        return -1



-----------------------------------------------------------------------
#binary search-  acsending------------------------------------------------
print(l1)
def binary(l,tar):
    start=0
    end=len(l1)-1
    while start <= end:
        mid=(start+end)//2
        if tar==l[mid]:
            return mid
        elif tar<l[mid]:
            end=mid-1
        elif tar>l[mid]:
            start=mid+1
    return -1
# target=int(input("enter the target:"))
# print(binary(l1,target))

#desending binary--------------------------

def binarydes(l,tar):
    start=0
    end=len(l1)-1
    while start <= end:
        mid=(start+end)//2
        if tar==l[mid]:
            return mid
        elif tar>l[mid]:
            end=mid-1
        elif tar<l[mid]:
            start=mid+1
    return -1
# target=int(input("enter the target:"))
# print(binarydes(l1,target))

#-----
target=int(input("enter target"))
if l1[0]<l1[len(l1)-1]:
    res=binary(l1,target)
# elif l1[0]>l1[len(l1)-1]:
else:
   res=binarydes(l1,target)
if res!=-1:
    print("element present at",res)
else:
    print("element not present")
   