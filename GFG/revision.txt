def evenlyDivides(self, n):
        count=0
        temp=n
        while n!=0:
            rem=n%10
            if rem!=0 and temp%rem==0:
                count+=1
            n=n//10
        return count
       


---------------------------------------------------

class Solution:
    def sumOfDigits (self, n):
        sum=0
        while n!=0:
            rem=n%10
            sum=sum+rem
            n=n//10
        return sum
-----------------------------------------------------

class Solution:
    def sumOfDigits (self, n):
        sum=0
        while n!=0:
            rem=n%10
            sum=sum+rem
            n=n//10
        return sum
---------------------------------------------------------

class Solution:
    def isPalindrome(self, x: int) -> bool:
        temp=x
        sum=0
        if x>=0:
            while temp!=0:
                rem=temp%10
                sum=(sum*10)+rem
                temp=temp//10
            return x==sum
        else:
            return False
       
-------------------------------------------------------------

class Solution:
    def armstrongNumber (self, n):
        pow=3
        temp=n
        sum=0
        while temp!=0:
            rem=temp%10
            sum=sum+(rem**pow)
            temp=temp//10
        return n==sum
--------------------------------------------------------------------

from math import sqrt
# print(int((sqrt(4))))
# print(int((4*0.5)))

def printDivisors(n):
    l = []

    for i in range(1, int(n*0.5) + 1):
        if n % i == 0:
            l.append(i)
            if (n // i) != i:
                l.append(n // i)
    return sorted(l)
print(printDivisors(4))


---------------------------------------------------------------------------

def check_prime(num):

    if num<=1:
        return False
    else:
        for i in range(2,int(num*0.5)+1):
            if num%i==0:
                return False
    return True


-------------------------------------------------------------------------
recursion
----------

class Solution:    
    #Complete this function
    def printNos(self,n):
        #Your code here
        
    # Base case: if n is less than 1, return
        if n==0:
            return
        # Recursive call for numbers less than n
        self.printNos(n - 1)
        # Print the current number
        print(n, end=' ')

-----------------------------------------------------------------------

class Solution:
    def printGfg(self, n):
        if n==0:
            return
        print("GFG",end=" ")
        self.printGfg(n-1)

----------------------------------------------------------------------

class Solution:
    def printNos(self, n):
        if n==0:
            return
        print(n,end=' ')
        return self.printNos(n-1)